{"version":3,"sources":["components/WeatherLocation/Location.js","components/WeatherLocation/WeatherData/WeatherExtraInfo.js","components/WeatherLocation/WeatherData/WeatherTemperature.js","constants/weathers.js","components/WeatherLocation/WeatherData/index.js","components/WeatherLocation/index.js","App.js","serviceWorker.js","index.js"],"names":["Location","_ref","city","react_default","a","createElement","className","WeatherExtraInfo","humidity","wind","concat","icons","_icons","Object","defineProperty","WeatherTemperature","temperature","weatherState","icon","lib_default","name","size","getWeatherIcon","WeatherData","_ref$data","data","WeatherData_WeatherTemperature","WeatherData_WeatherExtraInfo","WeatherLocation","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleUpdateClick","console","log","setState","state","_this$state","WeatherLocation_Location","WeatherLocation_WeatherData","onClick","Component","App","components_WeatherLocation","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6645a114.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './styles.css';\n\nconst Location = ( { city  }) => {\n    //const { city } = props;\n\n    return (\n        <div className=\"locationCont\">\n            <h1>{city}</h1>\n        </div>\n    )\n};\n\nLocation.propTypes = {\n    city: PropTypes.string.isRequired,\n}\n\nexport default Location;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst WeatherExtraInfo = ({ humidity, wind }) => (\n    <div className=\"weatherExtraInfoCont\">\n        <span className=\"extraInfoText\">{`Humedad: ${humidity} % - `}</span>\n        <span className=\"extraInfoText\">{`Vientos: ${wind} viento`}</span>\n    </div>\n);\n\nWeatherExtraInfo.propTypes = {\n    humidity: PropTypes.number.isRequired,\n    wind: PropTypes.string.isRequired,\n}\n\nexport default WeatherExtraInfo;","import React from 'react';\nimport WeatherIcons from 'react-weathericons';\nimport PropTypes from 'prop-types';\nimport {\n    CLOUD,    \n    CLOUDY,   \n    SUN,  \n    RAIN,     \n    SNOW,     \n    WINDY,    \n} from './../../../constants/weathers';\n\nconst icons = {\n    [CLOUD]: \"cloud\",\n    [CLOUDY] : \"cloudy\",\n    [SUN]: \"day-sunny\",\n    [RAIN]: \"rain\",\n    [SNOW]: \"snow\",\n    [WINDY]: \"windy\"\n};\n\nconst getWeatherIcon = weatherState => {\n    const icon = icons[weatherState];\n    const sizeIcon = \"4x\";\n    return <WeatherIcons className=\"wicon\" name={icon ? icon : \"day-sunny\"} size={sizeIcon} />\n\n}\n\nconst WeatherTemperature = ({ temperature, weatherState }) => (\n    <div className=\"weatherTemperatureCont\">\n        {\n            getWeatherIcon(weatherState)\n        }\n        <span className=\"temperature\" > {`${temperature}`} </span>\n        <span className=\"temperatureType\" > {`Cº`} </span>\n\n    </div>\n);\n\nWeatherTemperature.propTypes = {\n    temperature: PropTypes.number.isRequired,\n    weatherState: PropTypes.string.isRequired\n};\nexport default WeatherTemperature;\n","export const CLOUD = \"cloud\";\nexport const CLOUDY =  \"cloudy\";\nexport const SUN = \"day-sunny\";\nexport const RAIN = \"rain\";\nexport const SNOW = \"snow\";\nexport const WINDY = \"windy\";","import React from 'react';\nimport WeatherExtraInfo from './WeatherExtraInfo';\nimport WeatherTemperature from './WeatherTemperature';\nimport PropTypes from 'prop-types';\nimport './styles.css';\n\n/* Double destructuring */\nconst WeatherData = ({ data: { temperature, weatherState, humidity, wind } }) => (\n    <div className=\"weatherDataCont\">\n        <WeatherTemperature\n            temperature={temperature}\n            weatherState={weatherState}\n        />\n        <WeatherExtraInfo humidity={humidity}\n            wind={wind} />\n\n    </div>\n);\n\nWeatherData.propTypes = {\n    data: PropTypes.shape({\n        temperature: PropTypes.number.isRequired,\n        weatherState: PropTypes.string.isRequired,\n        humidity: PropTypes.number.isRequired,\n        wind: PropTypes.string.isRequired,\n    }),\n}\n\nexport default WeatherData;","import React ,  { Component } from 'react';\nimport Location from './Location';\nimport WeatherData from './WeatherData';\nimport './styles.css';\n\n\nimport {\n    SUN,   \n} from './../../constants/weathers';\n\nconst data = {\n    temperature: 5,\n    weatherState: SUN,\n    humidity: 10,\n    wind: '10 m/s'\n}\n\nclass WeatherLocation extends Component  {\n\n    constructor(){\n        super();\n\n        this.state = {\n            city: 'Buenos Aires',\n            data: data\n        }\n    }\n\n    handleUpdateClick = () => {\n        console.log(\"Actualizar\");\n        this.setState({\n            city: 'Barcelona'\n        })\n    }\n\n    render () { \n        const { city, data } = this.state;\n\n        return (<div className=\"weatherLocationCont\" >\n                <Location city={city} />\n                <WeatherData data={data} />\n                <button onClick={this.handleUpdateClick} >Actualizar</button>\n            </div>)\n    }\n}\n    \n\nexport default WeatherLocation;","import React, { Component } from 'react';\nimport './App.css';\nimport WeatherLocation from './components/WeatherLocation';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <WeatherLocation></WeatherLocation>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}